states_map <- map_data("state")
map_data <- left_join(states_map, score_table, by = c("region" = "state_lower"))
state_centers_df <- map_data %>%
group_by(region) %>%
summarise(long = mean(long), lat = mean(lat)) %>%
left_join(score_table, by = c("region" = "state_lower"))
rank_colors <- c(
"1 to 10" = "#66bb6a",
"11 to 20" = "#b2df8a",
"21 to 30" = "#ffeb3b",
"31 to 40" = "#ff7043",
"41 to 50" = "#d32f2f",
"Not ranked" = "gray"
)
categorize_rank <- function(rank) {
if (is.na(rank)) {
return("Not ranked")
} else if (rank <= 10) {
return("1 to 10")
} else if (rank <= 20) {
return("11 to 20")
} else if (rank <= 30) {
return("21 to 30")
} else if (rank <= 40) {
return("31 to 40")
} else {
return("41 to 50")
}
}
map_data$rank_category <- sapply(map_data$poor_bridges_percent_score_rank, categorize_rank)
ggplot() +
geom_polygon(data = map_data, aes(x = long, y = lat, group = group, fill = rank_category), color = "white") +
scale_fill_manual(values = rank_colors, breaks = names(rank_colors), na.value = "gray") +
theme_minimal() +
geom_text(data = state_centers_df, aes(x = long, y = lat, label = paste(state_abb, poor_bridges_percent_score_rank, sep = "\n")), size = 3, color = "black") +
labs(title = "Percent Structurally Deficient Bridges Rank", fill = "Rank") +
theme(
plot.title = element_text(hjust = 0.5),
legend.position = "right"
)
library(readxl)
library(dplyr)
library(ggplot2)
library(maps)
score_table <- Scores_and_Rankings %>%
select(state, rural_fatalities_per_100m_VMT_score_rank) %>%
mutate(
state_lower = tolower(state),
state_abb = state.abb[match(state, state.name)]
)
states_map <- map_data("state")
map_data <- left_join(states_map, score_table, by = c("region" = "state_lower"))
state_centers_df <- map_data %>%
group_by(region) %>%
summarise(long = mean(long), lat = mean(lat)) %>%
left_join(score_table, by = c("region" = "state_lower"))
rank_colors <- c(
"1 to 10" = "#66bb6a",
"11 to 20" = "#b2df8a",
"21 to 30" = "#ffeb3b",
"31 to 40" = "#ff7043",
"41 to 50" = "#d32f2f",
"Not ranked" = "gray"
)
categorize_rank <- function(rank) {
if (is.na(rank)) {
return("Not ranked")
} else if (rank <= 10) {
return("1 to 10")
} else if (rank <= 20) {
return("11 to 20")
} else if (rank <= 30) {
return("21 to 30")
} else if (rank <= 40) {
return("31 to 40")
} else {
return("41 to 50")
}
}
map_data$rank_category <- sapply(map_data$rural_fatalities_per_100m_VMT_score_rank, categorize_rank)
ggplot() +
geom_polygon(data = map_data, aes(x = long, y = lat, group = group, fill = rank_category), color = "white") +
scale_fill_manual(values = rank_colors, breaks = names(rank_colors), na.value = "gray") +
theme_minimal() +
geom_text(data = state_centers_df, aes(x = long, y = lat, label = paste(state_abb, rural_fatalities_per_100m_VMT_score_rank, sep = "\n")), size = 3, color = "black") +
labs(title = "Fatality Rate Per 100M Rural VMT Rank", fill = "Rank") +
theme(
plot.title = element_text(hjust = 0.5),
legend.position = "right"
)
library(readxl)
library(dplyr)
library(reactable)
library(htmltools)
# Bar chart creation function
create_bar_chart <- function(value, max_value, color = "#FFCC33") {
width_percent <- 100 * value / max_value
bar_style <- list(
display = "inline-block",
width = paste0(width_percent, "%"),
height = "15px",
backgroundColor = color,
textAlign = "center",
verticalAlign = "middle",
whiteSpace = "nowrap"
)
div(style = "display: flex; align-items: center;",
div(style = bar_style),
div(style = "padding-left: 10px;", format(round(value, 2), big.mark = ",", scientific = FALSE))
)
}
# Filter and arrange data
table_data <- scores_rankings %>%
select(state, rural_fatalities_per_100m_VMT_score) %>%
filter(!is.na(rural_fatalities_per_100m_VMT_score) & rural_fatalities_per_100m_VMT_score > 0) %>%
arrange(rural_fatalities_per_100m_VMT_score) %>%
mutate(rank = row_number())
library(readxl)
library(dplyr)
library(reactable)
library(htmltools)
# Bar chart creation function
create_bar_chart <- function(value, max_value, color = "#FFCC33") {
width_percent <- 100 * value / max_value
bar_style <- list(
display = "inline-block",
width = paste0(width_percent, "%"),
height = "15px",
backgroundColor = color,
textAlign = "center",
verticalAlign = "middle",
whiteSpace = "nowrap"
)
div(style = "display: flex; align-items: center;",
div(style = bar_style),
div(style = "padding-left: 10px;", format(round(value, 2), big.mark = ",", scientific = FALSE))
)
}
# Filter and arrange data
table_data <- Scores_and_Rankings %>%
select(state, rural_fatalities_per_100m_VMT_score) %>%
filter(!is.na(rural_fatalities_per_100m_VMT_score) & rural_fatalities_per_100m_VMT_score > 0) %>%
arrange(rural_fatalities_per_100m_VMT_score) %>%
mutate(rank = row_number())
table_data <- table_data %>%
select(rank, state, rural_fatalities_per_100m_VMT_score)
max_value <- max(table_data$rural_fatalities_per_100m_VMT_score, na.rm = TRUE)
# Render the table with title
htmltools::tagList(
htmltools::tags$h3("TABLE 17: FATALITY RATE PER 100 MILLION RURAL VEHICLE-MILES"),
reactable(
data = table_data,
columns = list(
rank = colDef(name = "Rank", align = "center"),
state = colDef(name = "State"),
rural_fatalities_per_100m_VMT_score = colDef(
name = "Fatality Rate Per 100M Rural VMT",
cell = function(value) {
create_bar_chart(value, max_value)
},
minWidth = 250
)
),
defaultSorted = "rank",
bordered = TRUE,
highlight = TRUE,
striped = TRUE,
pagination = FALSE,  # Show all data without pagination
defaultPageSize = nrow(table_data)  # Display all data at once
)
)
library(readxl)
library(dplyr)
library(reactable)
library(htmltools)
# Bar chart creation function
create_bar_chart <- function(value, max_value, color = "#FFCC33") {
width_percent <- 100 * value / max_value
bar_style <- list(
display = "inline-block",
width = paste0(width_percent, "%"),
height = "15px",
backgroundColor = color,
textAlign = "center",
verticalAlign = "middle",
whiteSpace = "nowrap"
)
div(style = "display: flex; align-items: center;",
div(style = bar_style),
div(style = "padding-left: 10px;", format(round(value, 2), big.mark = ",", scientific = FALSE))
)
}
# Filter and arrange data
table_data <- Scores_and_Rankings %>%
select(state, rural_fatalities_per_100m_VMT_score) %>%
filter(!is.na(rural_fatalities_per_100m_VMT_score) & rural_fatalities_per_100m_VMT_score > 0) %>%
arrange(rural_fatalities_per_100m_VMT_score) %>%
mutate(rank = row_number())
table_data <- table_data %>%
select(rank, state, rural_fatalities_per_100m_VMT_score)
max_value <- max(table_data$rural_fatalities_per_100m_VMT_score, na.rm = TRUE)
# Render the table with title
htmltools::tagList(
htmltools::tags$h3("TABLE 17: FATALITY RATE PER 100 MILLION RURAL VEHICLE-MILES"),
reactable(
data = table_data,
columns = list(
rank = colDef(name = "Rank", align = "center"),
state = colDef(name = "State"),
rural_fatalities_per_100m_VMT_score = colDef(
name = "rural_fatalities_per_100m_VMT_score",
cell = function(value) {
create_bar_chart(value, max_value)
},
minWidth = 250
)
),
defaultSorted = "rank",
bordered = TRUE,
highlight = TRUE,
striped = TRUE,
pagination = FALSE,  # Show all data without pagination
defaultPageSize = nrow(table_data)  # Display all data at once
)
)
library(readxl)
library(dplyr)
library(ggplot2)
library(maps)
score_table <- Scores_and_Rankings %>%
select(state, urban_fatalities_per_100m_VMT_score_rank) %>%
mutate(
state_lower = tolower(state),
state_abb = state.abb[match(state, state.name)]
)
states_map <- map_data("state")
map_data <- left_join(states_map, score_table, by = c("region" = "state_lower"))
state_centers_df <- map_data %>%
group_by(region) %>%
summarise(long = mean(long), lat = mean(lat)) %>%
left_join(score_table, by = c("region" = "state_lower"))
rank_colors <- c(
"1 to 10" = "#66bb6a",
"11 to 20" = "#b2df8a",
"21 to 30" = "#ffeb3b",
"31 to 40" = "#ff7043",
"41 to 50" = "#d32f2f",
"Not ranked" = "gray"
)
categorize_rank <- function(rank) {
if (is.na(rank)) {
return("Not ranked")
} else if (rank <= 10) {
return("1 to 10")
} else if (rank <= 20) {
return("11 to 20")
} else if (rank <= 30) {
return("21 to 30")
} else if (rank <= 40) {
return("31 to 40")
} else {
return("41 to 50")
}
}
map_data$rank_category <- sapply(map_data$urban_fatalities_per_100m_VMT_score_rank, categorize_rank)
ggplot() +
geom_polygon(data = map_data, aes(x = long, y = lat, group = group, fill = rank_category), color = "white") +
scale_fill_manual(values = rank_colors, breaks = names(rank_colors), na.value = "gray") +
theme_minimal() +
geom_text(data = state_centers_df, aes(x = long, y = lat, label = paste(state_abb, urban_fatalities_per_100m_VMT_score_rank, sep = "\n")), size = 3, color = "black") +
labs(title = "Urban Fatalities Per 100M Vehicle-Miles Rank", fill = "Rank") +
theme(
plot.title = element_text(hjust = 0.5),
legend.position = "right"
)
library(readxl)
library(dplyr)
library(reactable)
library(htmltools)
# Bar chart creation function
create_bar_chart <- function(value, max_value, color = "#FFCC33") {
width_percent <- 100 * value / max_value
bar_style <- list(
display = "inline-block",
width = paste0(width_percent, "%"),
height = "15px",
backgroundColor = color,
textAlign = "center",
verticalAlign = "middle",
whiteSpace = "nowrap"
)
div(style = "display: flex; align-items: center;",
div(style = bar_style),
div(style = "padding-left: 10px;", sprintf("%.2f", value))  # Ensures 2 digits after decimal
)
}
# Filter and arrange the data
table_data <- Scores_and_Rankings %>%
select(state, urban_fatalities_per_100m_VMT_score) %>%
filter(!is.na(urban_fatalities_per_100m_VMT_score) & urban_fatalities_per_100m_VMT_score > 0) %>%
arrange(urban_fatalities_per_100m_VMT_score) %>%
mutate(rank = row_number())
table_data <- table_data %>%
select(rank, state, urban_fatalities_per_100m_VMT_score)
# Calculate the max value for scaling the bar chart
max_value <- max(table_data$urban_fatalities_per_100m_VMT_score, na.rm = TRUE)
# Create the reactable table with bar charts
reactable(
data = table_data,
columns = list(
rank = colDef(name = "Rank", align = "center"),
state = colDef(name = "State"),
urban_fatalities_per_100m_VMT_score = colDef(
name = "Fatality Rate Per 100M Urban Vehicle-Miles",
cell = function(value) {
create_bar_chart(value, max_value)
},
format = colFormat(digits = 2),  # Ensure 2 decimal places
minWidth = 250
)
),
defaultSorted = "rank",
bordered = TRUE,
highlight = TRUE,
striped = TRUE,
pagination = FALSE,  # Display all data without pagination
defaultPageSize = nrow(table_data)  # Display all data at once
)
library(readxl)
library(dplyr)
library(reactable)
library(htmltools)
# Bar chart creation function
create_bar_chart <- function(value, max_value, color = "#FFCC33") {
width_percent <- 100 * value / max_value
bar_style <- list(
display = "inline-block",
width = paste0(width_percent, "%"),
height = "15px",
backgroundColor = color,
textAlign = "center",
verticalAlign = "middle",
whiteSpace = "nowrap"
)
div(style = "display: flex; align-items: center;",
div(style = bar_style),
div(style = "padding-left: 10px;", sprintf("%.2f", value))  # Ensures 2 digits after decimal
)
}
# Filter and arrange the data
table_data <- Scores_and_Rankings %>%
select(state, urban_fatalities_per_100m_VMT_score) %>%
filter(!is.na(urban_fatalities_per_100m_VMT_score) & urban_fatalities_per_100m_VMT_score > 0) %>%
arrange(urban_fatalities_per_100m_VMT_score) %>%
mutate(rank = row_number())
table_data <- table_data %>%
select(rank, state, urban_fatalities_per_100m_VMT_score)
# Calculate the max value for scaling the bar chart
max_value <- max(table_data$urban_fatalities_per_100m_VMT_score, na.rm = TRUE)
# Create the reactable table with bar charts
reactable(
data = table_data,
columns = list(
rank = colDef(name = "Rank", align = "center"),
state = colDef(name = "State"),
urban_fatalities_per_100m_VMT_score = colDef(
name = "urban_fatalities_per_100m_VMT_score",
cell = function(value) {
create_bar_chart(value, max_value)
},
format = colFormat(digits = 2),
minWidth = 250
)
),
defaultSorted = "rank",
bordered = TRUE,
highlight = TRUE,
striped = TRUE,
pagination = FALSE,
defaultPageSize = nrow(table_data)
)
library(readxl)
library(dplyr)
library(ggplot2)
library(maps)
score_table <- Scores_and_Rankings %>%
select(state, other_fatalities_per_100m_VMT_score_rank) %>%
mutate(
state_lower = tolower(state),
state_abb = state.abb[match(state, state.name)]
)
states_map <- map_data("state")
map_data <- left_join(states_map, score_table, by = c("region" = "state_lower"))
state_centers_df <- map_data %>%
group_by(region) %>%
summarise(long = mean(long), lat = mean(lat)) %>%
left_join(score_table, by = c("region" = "state_lower"))
rank_colors <- c(
"1 to 10" = "#66bb6a",
"11 to 20" = "#b2df8a",
"21 to 30" = "#ffeb3b",
"31 to 40" = "#ff7043",
"41 to 50" = "#d32f2f",
"Not ranked" = "gray"
)
categorize_rank <- function(rank) {
if (is.na(rank)) {
return("Not ranked")
} else if (rank <= 10) {
return("1 to 10")
} else if (rank <= 20) {
return("11 to 20")
} else if (rank <= 30) {
return("21 to 30")
} else if (rank <= 40) {
return("31 to 40")
} else {
return("41 to 50")
}
}
map_data$rank_category <- sapply(map_data$other_fatalities_per_100m_VMT_score_rank, categorize_rank)
ggplot() +
geom_polygon(data = map_data, aes(x = long, y = lat, group = group, fill = rank_category), color = "white") +
scale_fill_manual(values = rank_colors, breaks = names(rank_colors), na.value = "gray") +
theme_minimal() +
geom_text(data = state_centers_df, aes(x = long, y = lat, label = paste(state_abb, other_fatalities_per_100m_VMT_score_rank, sep = "\n")), size = 3, color = "black") +
labs(title = "Other Fatalities Per 100M VMT Rank Score", fill = "Rank") +
theme(
plot.title = element_text(hjust = 0.5),
legend.position = "right"
)
library(readxl)
library(dplyr)
library(reactable)
library(htmltools)
# Bar chart creation function
create_bar_chart <- function(value, max_value, color = "#FFCC33") {
width_percent <- 100 * value / max_value
bar_style <- list(
display = "inline-block",
width = paste0(width_percent, "%"),
height = "15px",
backgroundColor = color,
textAlign = "center",
verticalAlign = "middle",
whiteSpace = "nowrap"
)
div(style = "display: flex; align-items: center;",
div(style = bar_style),
div(style = "padding-left: 10px;", format(round(value, 2), big.mark = ",", scientific = FALSE))
)
}
# Filter and arrange the data
table_data <- Scores_and_Rankings %>%
select(state, other_fatalities_per_100m_VMT_score) %>%
filter(!is.na(other_fatalities_per_100m_VMT_score) & other_fatalities_per_100m_VMT_score > 0) %>%
arrange(other_fatalities_per_100m_VMT_score) %>%
mutate(rank = row_number())
table_data <- table_data %>%
select(rank, state, other_fatalities_per_100m_VMT_score)
# Calculate the max value for scaling the bar chart
max_value <- max(table_data$other_fatalities_per_100m_VMT_score, na.rm = TRUE)
# Create the reactable table with bar charts and the title
htmltools::tagList(
htmltools::tags$h3("TABLE 19: FATALITY RATE PER 100 MILLION OTHER VEHICLE-MILES"),
reactable(
data = table_data,
columns = list(
rank = colDef(name = "Rank", align = "center"),
state = colDef(name = "State"),
other_fatalities_per_100m_VMT_score = colDef(
name = "Other Fatalities Per 100M VMT",
cell = function(value) {
create_bar_chart(value, max_value)
},
minWidth = 250
)
),
defaultSorted = "rank",
bordered = TRUE,
highlight = TRUE,
striped = TRUE,
pagination = FALSE,  # Display all data without pagination
defaultPageSize = nrow(table_data)  # Display all data at once
)
)
# Install the package
install.packages("here")
# Load the here package
library(here)
# Find the root directory of your R project
here()
options(repos = c(CRAN = "https://cran.rstudio.com/"))
# Install the package
install.packages("here")
# Load the here package
library(here)
# Find the root directory of your R project
here()
# Get the current working directory
getwd()
# Install readxl
install.packages("readxl")
# Load the readxl package
library(readxl)
# Specify the file path relative to the project root
AHR_data <- read_excel(here("AHR_data 28th_summing_components_columns.xlsx"), sheet = "AHR Data")
View(AHR_data)
Scores_and_Rankings <- read_excel(here("AHR_data 28th_summing_components_columns.xlsx"), sheet = "Scores & Rankings")
View(Scores_and_Rankings)
Disbursement_Data <- read_excel(here("AHR_data 28th_summing_components_columns.xlsx"), sheet = "Disbursement Data")
View(Disbursement_Data)
